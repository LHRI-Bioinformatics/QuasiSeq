ReadCount_snp.java
â€œjava ReadCount_snp xxxx.pileup.readcounts output_filename  estimate_error_rate[default 0.01] p-Value_threshold[default 0.05] varFreq_threshold[default 0.001] coverage_threshold[default 10]

tasks.py
  def pipeline_driver(outDir,sampleName, referencefilename, rankingMethod, startIndex, endIndex, percentThresh, pvalthresh, minorAlleleReadThresh, snpthresh):
    -> startPipeline(outDir,outDir+uploaded_name+".fastq", outDir+referencefilename, uploaded_name, ranking_method, None, startingindex, endingindex, snpthresh, percentThresh, read2thresh)

      linearQuasiSeq.py
        def startPipeline(outDir, initialFastq, referenceFile, sampleName, rankingMethod, pool, startIndex, endIndex, snpThresh, percentThresh, minorAlleleReadThresh,  *optionalfilters):
          startPipeline parameters:
            'endIndex': u'2270',
            'buffer': 30,
            'sampleName': u'lu10mix_FL_cc',
            'startIndex': u'25',
            'initialFastq': u'/data/quasiSeqOut/19daa604-94ed-43f5-85c9-6c02b2a1423e/lu10mix_FL_cc.fastq',
            'optionalfilters': (),
            'referenceFile': u'/data/quasiSeqOut/19daa604-94ed-43f5-85c9-6c02b2a1423e/flu1PB.fa',
            'minorAlleleReadThresh': 10,
            'rankingMethod': u'percentage',
            'snpThresh': u'4',
            'percentThresh': 1.0,
            'pool': None,
            'outDir': u'/data/quasiSeqOut/19daa604-94ed-43f5-85c9-6c02b2a1423e/'

          buffer=30
          referenceLength=getConsensusLength(referenceFile)

          if startIndex==None or int(startIndex)<1: startIndex=1
          else: startIndex=int(startIndex)

          if endIndex==None or int(endIndex)<1 or int(endIndex)>referenceLength: endIndex=referenceLength
          else: endIndex=int(endIndex)

          -> def pipeline(outDir, initialFastq, referenceFile, sampleName, rankingMethod, pool, startIndex, endIndex, snpThresh, percentThresh,minorAlleleReadThresh, *optionalfilters):
            -> def consenseAndRealignSparc(initialFastq,referenceFile,initialBamfile, readCountsFile, consensusFile, realignedBamfile)
              -> def getReadCounts(reference,bamFile, *optionalfilters):
                -> def getSNPs(readCountsFile, *optionalfilters):


python rankSNVs.py lu10mix_FL_cc_3_1_1.realign.readcounts.snp lu10mix_FL_cc_3_1_1_1.realign.rankedsnp percentage lu10mix_FL_cc_3_1_1.consensus.fasta -s 30 -e 2263 -perc 1.0 -pval 0.01 -r 10 -numSig 13000

tasks.py
  def pipeline_driver(outDir,sampleName, referencefilename, rankingMethod, startIndex, endIndex, percentThresh, pvalthresh, minorAlleleReadThresh, snpthresh):
    pipeline_driver parameters:
      'referencefilename': u'flu1PB.fa',
      'ranking_method': u'percentage',
      'endingindex': u'2270',
      'read2thresh': u'10',
      'startingindex': u'25',
      'pvalthresh': u'',
      'snpthresh': u'4',
      'outDir': u'/data/quasiSeqOut/',
      'percentThresh': u'1',
      'sampleName': u'lu10mix_FL_cc'

    if percentThresh==None or percentThresh==0: percentThresh=1
    else: percentThresh=float(percentThresh)

    if minorAlleleReadThresh==None or minorAlleleReadThresh==0: minorAlleleReadThresh=10
    else: minorAlleleReadThresh=int(minorAlleleReadThresh)

    referenceFile=outDir+referencefilename
    initialFastq=outDir+sampleName+".fastq"

    -> startPipeline(outDir,initialFastq, referenceFile, sampleName, rankingMethod, None, startIndex, endIndex, snpthresh, percentThresh, minorAlleleReadThresh)

      linearQuasiSeq.py
        def startPipeline(outDir, initialFastq, referenceFile, sampleName, rankingMethod, pool, startIndex, endIndex, snpThresh, percentThresh, minorAlleleReadThresh,  *optionalfilters):
          startPipeline parameters:
            'endIndex': u'2270',
            'buffer': 30,
            'sampleName': u'lu10mix_FL_cc',
            'startIndex': u'25',
            'initialFastq': u'/data/quasiSeqOut/19daa604-94ed-43f5-85c9-6c02b2a1423e/lu10mix_FL_cc.fastq',
            'optionalfilters': (),
            'referenceFile': u'/data/quasiSeqOut/19daa604-94ed-43f5-85c9-6c02b2a1423e/flu1PB.fa',
            'minorAlleleReadThresh': 10,
            'rankingMethod': u'percentage',
            'snpThresh': u'4',
            'percentThresh': 1.0,
            'pool': None,
            'outDir': u'/data/quasiSeqOut/19daa604-94ed-43f5-85c9-6c02b2a1423e/'

          buffer=30
          referenceLength=getConsensusLength(referenceFile)

          if startIndex==None or int(startIndex)<1: startIndex=1
          else: startIndex=int(startIndex)

          if endIndex==None or int(endIndex)<1 or int(endIndex)>referenceLength: endIndex=referenceLength
          else: endIndex=int(endIndex)

          -> def pipeline(outDir, initialFastq, referenceFile, sampleName, rankingMethod, pool, startIndex, endIndex, snpThresh, percentThresh,minorAlleleReadThresh, *optionalfilters):

            -> def rankSNVs(snpFile, rankedFile, rankMethod, consensusFile, startIndex, endIndex, percentThresh, pvalThresh, minorAlleleReadThresh, *optionalfilters):
              command = " python rankSNVs.py" + " " + str(snpFile)+ " " + rankedFile  + " " + rankMethod + " " + consensusFile + " "
              if startIndex :
                command = command + "-s" + " " + str(startIndex)  + " "
              if endIndex :
                command = command + "-e" + " " + str(endIndex) + " "
              if percentThresh:
                command = command + "-perc" + " " + str(percentThresh)+ " "
              if pvalThresh:
                command = command + "-pval" + " " + str(pvalThresh) + " "
              if minorAlleleReadThresh:
                command = command + "-r" + " " + str(minorAlleleReadThresh) + " "
